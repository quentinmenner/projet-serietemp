geom_line()
graph
graph = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
scale_x_date(expand = c(0.01, 0.01)) +
ggtitle("Evolution de l'indice de la production mensuelle de biens manufacturés
\nen France entre janvier 1985 et janvier 2000")+
labs(caption = "Indice en base 100 en 1990")+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
graph
graph = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
scale_x_date(expand = c(0.01, 0.01))
graph
graph = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
ggtitle("Evolution de l'indice de la production mensuelle de biens manufacturés
\nen France entre janvier 1985 et janvier 2000")+
labs(caption = "Indice en base 100 en 1990")+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
graph
# Construction du graphique
graph_diff = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
ggtitle("Représentation de la série temporelle choisie") +
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde du graphique
saveRDS(graph_diff, file.path(lien_graph, "ts_choisie.rds"))
graph_niveau /
graph_diff
graph_diff
graph_niveau /
graph_diff
library(patchwork)
graph_niveau /
graph_diff
library(zoo)
library(tseries)
library(lmtest)
library(forecast)
library(ggplot2)
library(urca)
library(tidyverse)
library(lubridate)
library(xts)
library(patchwork)
library(ggpmisc)
# Lieu exportation graphiques
setwd(dir = "~/projet-serietemp")
lien_graph = "Graphiques"
# en object data.frame
datafile <- "valeurs_mensuelles_2.csv"
data <- read.csv(datafile, sep = ";") %>%
arrange(Periode) %>%
mutate(Periode = ym(Periode))
#Passage en en object ts
ts_data <- ts(data$Valeur, start = c(1985,01), freq = 12)
# Y-a-t-il une saisonnalité ?
decomposition_saison <- data %>%
mutate(year = year(Periode)) %>%
mutate(month = month(Periode, label = TRUE, abbr = FALSE,locale = "French")) %>%
select(month, Valeur)
gg3 = ggplot(decomposition_saison, aes(group = month, x = month, y =Valeur)) +
geom_boxplot()+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45,hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
gg3
saveRDS(gg3, file.path(lien_graph,"boxplot.rds"))
# Y-a-t-il une tendance ?
data_tendance <- data %>%
mutate(index = index(data))
# Régression linéaire sur le temps pour observer s'il y a une tendance
lm(data_tendance$Valeur ~ data_tendance$index)
# Différenciation première
diff_ts = diff(ts_data, 1)
# ADF test
test_adf = urca::ur.df(diff_ts)
slot(test_adf, 'teststat')
slot(test_adf, "cval")
# PP test
test_pp = urca::ur.pp(diff_ts, type = "Z-tau") # test utilisé dans corrigé
slot(test_pp, 'teststat')
slot(test_pp, "cval")
test_pp
summary(test_pp)
# KPSS
test_kpss = kpss.test(diff_ts, null = "Level")
test_kpss
slot(test_kpss, 'teststat')
slot(test_kpss, "cval")
graph_niveau = ggplot(data = data, aes(x = Periode, y = Valeur))+
geom_line()+
scale_x_date(expand = c(0.01, 0.01)) +
ggtitle("Evolution de l'indice de la production mensuelle de biens manufacturés
\nen France entre janvier 1985 et janvier 2000")+
labs(caption = "Indice en base 100 en 1990")+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde du graphique
saveRDS(graph_niveau, file.path(lien_graph,"courbe.rds"))
# Construction du graphique
graph_diff = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
ggtitle("Représentation de la série temporelle choisie") +
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde du graphique
saveRDS(graph_diff, file.path(lien_graph, "ts_choisie.rds"))
graph_niveau /
graph_diff
# Partie 2 ####
# Question 4 : Estimation un ARMA(p,q)
acf = ggAcf(diff_ts)+
ggthemes::theme_stata()+
labs(title = "ACF")+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
pacf = ggPacf(diff_ts)+
ggthemes::theme_stata()+
labs(title = "PACF")+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde
saveRDS(acf, file.path(lien_graph,"ACF_ts_choix.rds"))
saveRDS(pacf, file.path(lien_graph,"PACF_ts_choix.rds"))
acf /
pacf
# Testons cette hypothèse
model_maxi <- arima(diff_ts, order = c(1,0,1))
# Testons cette hypothèse
model_maxi = arima(diff_ts, order = c(1,0,1))
residus_maxi = residuals(model_maxi)
# Parait bon :
ggAcf(residus_maxi) + ggPacf(residus_maxi)
acf /
pacf
knitr::opts_chunk$set(echo = TRUE)
library(patchwork)
acf = readRDS(file.path(lien_graph,"ACF_ts_choix.rds"))
pacf = readRDS(file.path(lien_graph,"PACF_ts_choix.rds"))
acf/
pacf
evaluation_model <- function(order, x = diff_ts, lags = 24,...){
# On estime les paramètres
model = forecast::Arima(x, order = order,...)
residus <- residuals(model)
# Test d'autocorrélation des résidus avec lags retards testés
lbtest <- t(sapply(1:lags,function(l){
if(l <=  length(coef(model))){
b <- list(statistic = NA, p.value = NA)
}else{
b <- Box.test(residus,"Ljung-Box",lag = l,
fitdf = length(coef(model))
)
}
data.frame(lag = l,
b$statistic,
b$p.value
)
}))
# on ajoute un tryCatch pour éviter les erreurs
ttest <- tryCatch(lmtest::coeftest(model), error = NULL)
# On regarde les informations de validité
qualite <- c(AIC(model), BIC(model), accuracy(model))
names(qualite) <- c("AIC", "BIC", colnames(accuracy(model)))
list(model = model,
ttest = ttest,
lbtest = lbtest,
qualite = qualite)
}
models_possibles = expand.grid(p = c(0, 1), d = 0, q = c(0, 1))
# On applique la fonction au 4 modèles possibles
models_evalues = apply(models_possibles,1, evaluation_model)
models_evalues$`ARIMA(0,0,0)`
models_evalues$`ARIMA(1,0,0)`
library(zoo)
library(tseries)
library(lmtest)
library(forecast)
library(ggplot2)
library(urca)
library(tidyverse)
library(lubridate)
library(xts)
library(patchwork)
library(ggpmisc)
# Lieu exportation graphiques
setwd(dir = "~/projet-serietemp")
lien_graph = "Graphiques"
# en object data.frame
datafile <- "valeurs_mensuelles_2.csv"
data <- read.csv(datafile, sep = ";") %>%
arrange(Periode) %>%
mutate(Periode = ym(Periode))
#Passage en en object ts
ts_data <- ts(data$Valeur, start = c(1985,01), freq = 12)
# Y-a-t-il une saisonnalité ?
decomposition_saison <- data %>%
mutate(year = year(Periode)) %>%
mutate(month = month(Periode, label = TRUE, abbr = FALSE,locale = "French")) %>%
select(month, Valeur)
gg3 = ggplot(decomposition_saison, aes(group = month, x = month, y =Valeur)) +
geom_boxplot()+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45,hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
gg3
saveRDS(gg3, file.path(lien_graph,"boxplot.rds"))
# Y-a-t-il une tendance ?
data_tendance <- data %>%
mutate(index = index(data))
# Régression linéaire sur le temps pour observer s'il y a une tendance
lm(data_tendance$Valeur ~ data_tendance$index)
# Différenciation première
diff_ts = diff(ts_data, 1)
# ADF test
test_adf = urca::ur.df(diff_ts)
slot(test_adf, 'teststat')
slot(test_adf, "cval")
# PP test
test_pp = urca::ur.pp(diff_ts, type = "Z-tau") # test utilisé dans corrigé
slot(test_pp, 'teststat')
slot(test_pp, "cval")
test_pp
summary(test_pp)
# KPSS
test_kpss = kpss.test(diff_ts, null = "Level")
test_kpss
slot(test_kpss, 'teststat')
slot(test_kpss, "cval")
graph_niveau = ggplot(data = data, aes(x = Periode, y = Valeur))+
geom_line()+
scale_x_date(expand = c(0.01, 0.01)) +
ggtitle("Evolution de l'indice de la production mensuelle de biens manufacturés
\nen France entre janvier 1985 et janvier 2000")+
labs(caption = "Indice en base 100 en 1990")+
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde du graphique
saveRDS(graph_niveau, file.path(lien_graph,"courbe.rds"))
# Construction du graphique
graph_diff = ggplot(diff_ts, as.numeric = FALSE)+
geom_line()+
ggtitle("Représentation de la série temporelle choisie") +
ggthemes::theme_stata()+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(angle = 45, hjust = 1),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde du graphique
saveRDS(graph_diff, file.path(lien_graph, "ts_choisie.rds"))
graph_niveau /
graph_diff
# Identification des valeurs maximales
acf = ggAcf(diff_ts)+
ggthemes::theme_stata()+
labs(title = "ACF")+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
pacf = ggPacf(diff_ts)+
ggthemes::theme_stata()+
labs(title = "PACF")+
theme(
plot.title   = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 15),
axis.text.x  = element_text(),
axis.text.y  = element_text(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Sauvegarde
saveRDS(acf, file.path(lien_graph,"ACF_ts_choix.rds"))
saveRDS(pacf, file.path(lien_graph,"PACF_ts_choix.rds"))
acf /
pacf
evaluation_model <- function(order, x = diff_ts, lags = 24,...){
# On estime les paramètres
model = forecast::Arima(x, order = order,...)
residus <- residuals(model)
# Test d'autocorrélation des résidus avec lags retards testés
lbtest <- t(sapply(1:lags,function(l){
if(l <=  length(coef(model))){
b <- list(statistic = NA, p.value = NA)
}else{
b <- Box.test(residus,"Ljung-Box",lag = l,
fitdf = length(coef(model))
)
}
data.frame(lag = l,
b$statistic,
b$p.value
)
}))
# on ajoute un tryCatch pour éviter les erreurs
ttest <- tryCatch(lmtest::coeftest(model), error = NULL)
# On regarde les informations de validité
qualite <- c(AIC(model), BIC(model), accuracy(model))
names(qualite) <- c("AIC", "BIC", colnames(accuracy(model)))
list(model = model,
ttest = ttest,
lbtest = lbtest,
qualite = qualite)
}
models_possibles = expand.grid(p = c(0, 1), d = 0, q = c(0, 1))
# On applique la fonction au 4 modèles possibles
models_evalues = apply(models_possibles,1, evaluation_model)
models_evalues$`ARIMA(0,0,0)`
models_evalues$`ARIMA(1,0,0)`
models_evalues$`ARIMA(0,0,1)`
models_evalues$`ARIMA(1,0,1)`
nom_modeles_retenus = c('ARIMA(1,0,0)', 'ARIMA(0,0,1)')
modeles_retenus <- models_evalues[nom_modeles_retenus]
?apply ?
dcd
zfq
?apply
models_evalues
models_evalues
models_evalues[1]
models_evalues[`ARIMA(0,0,0)`]
models_evalues$`ARIMA(0,0,0)`
#ARIMA(0,0,0)
models_evalues$`ARIMA(0,0,0)`
# On applique la fonction au 4 modèles possibles
models_evalues = apply(models_possibles,1, evaluation_model)
#ARIMA(0,0,0)
models_evalues$`ARIMA(0,0,0)`
#ARIMA(0,0,0)
models_evalues[0]
#ARIMA(0,0,0)
models_evalues[1]
#ARIMA(1,0,0)
models_evalues[2]
#ARIMA(1,0,1)
models_evalues[4]
# Modèles retenues selon les critères d'autocorrélation des résidues et
# significativité des coeffcicients
nom_modeles_retenus = c('ARIMA(1,0,0)', 'ARIMA(0,0,1)')
modeles_retenus <- models_evalues[nom_modeles_retenus]
modeles_retenus
modeles_retenus <- models_evalues['ARIMA(1,0,0)']
modeles_retenus
models_evalues['ARIMA(1,0,0)']
#ARIMA(0,0,0)
models_evalues[1]
#ARIMA(1,0,0)
models_evalues[2]
#ARIMA(0,0,1)
models_evalues[3]
#ARIMA(1,0,1)
models_evalues[4]
# Selection par la qualité (AIC, BIC)
qualite_modeles_retenus <- sapply(modeles_retenus, function(x) x$qualite)
round(qualite_modeles_retenus,4)
apply(qualite_modeles_retenus,1,function(x) colnames(qualite_modeles_retenus)[which.min(x)])
modeles_retenus
# Modèles retenues selon les critères d'autocorrélation des résidues et
# significativité des coeffcicients
num_modeles_retenus = c(2,3)
modeles_retenus = models_evalues[num_modeles_retenus]
modeles_retenus
# Selection par la qualité (AIC, BIC)
qualite_modeles_retenus <- sapply(modeles_retenus, function(x) x$qualite)
round(qualite_modeles_retenus,4)
apply(qualite_modeles_retenus,1,function(x) colnames(qualite_modeles_retenus)[which.min(x)])
modeles_retenus
saveRDS(models_evalues,"eval_modele.rds")
models_evalues = readRDS("eval_modele.rds")
models_evalues[1]
models_evalues[1]$ttest
models_evalues[1]$ttest
models_evalues[1]$qualite
models_evalues[1][[1]]
models_evalues[[1]]
models_evalues[[1]]$ttest
library(knitr)
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(models_evalues[[1]]$ttest)
models_evalues[[1]]$ttest
as_tibble(models_evalues[[1]]$ttest)
broom::tidy(models_evalues[[1]]$ttest)
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest))
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = simple)
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = "simple")
?kable
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = "latex")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = "html")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = "rst")
library(knitr)
models_evalues = readRDS("eval_modele.rds")
knitr::kable(broom::tidy(models_evalues[[1]]$ttest), format = "pipe")
broom::tidy(models_evalues[[1]]$ttest)
kable(models_evalues[[1]]$lbtest)
kable(round(models_evalues[[1]]$lbtest))
kable(round(models_evalues[[1]]$lbtest, 2))
kable(models_evalues[[1]]$lbtest, 2, digits = 2)
kable(models_evalues[[1]]$lbtest, digits = 2)
kable(models_evalues[[1]]$lbtest, digits = 1)
library(knitr)
kable(models_evalues[[1]]$lbtest, format = "latex",digits = 1)
knitr::kable(models_evalues[[1]]$lbtest, format = "latex",digits = 1)
library(knitr)
plot(knitr::kable(models_evalues[[1]]$lbtest, format = "latex",escape = TRUE,digits = 1))
plot(knitr::kable(models_evalues[[1]]$lbtest, format = "latex",digits = 1))
plot(knitr::kable(head(models_evalues[[1]]$lbtest), format = "latex",digits = 1))
plot(knitr::kable(head(models_evalues[[1]]$lbtest), format = "latex",digits = 1), ylim = 5)
plot(knitr::kable(head(models_evalues[[1]]$lbtest), format = "latex",digits = 1), ylim = 10)
plot(head(models_evalues[[1]]$lbtest), format = "latex",digits = 1))
plot(head(models_evalues[[1]]$lbtest), format = "latex",digits = 1)
plot(head(models_evalues[[1]]$lbtest))
head(models_evalues[[1]]$lbtest)
models_evalues[[1]]$lbtest
head(models_evalues[[1]]$lbtest, 10)
head(models_evalues[['ARIMA(1,0,0)']]$lbtest, 10)
broom::tidy(models_evalues[[2]]$ttest)
head(models_evalues[[2]]$lbtest, 10)
broom::tidy(models_evalues[[2]]$ttest)
head(models_evalues[[2]]$lbtest, 10)
head(models_evalues[[2]]$lbtest, 20)
head(models_evalues[[2]]$lbtest, 15)
#ARIMA(1,0,0)
models_evalues[2]
#ARIMA(0,0,1)
models_evalues[3]
#ARIMA(1,0,1)
models_evalues[4]
#ARIMA(0,0,1)
models_evalues[3]
saveRDS(rest, "residues.rds")
rest = checkresiduals(model)
saveRDS(rest, "residues.rds")
rest = readRDS('residues.rds')
plot(rest)
rest
rest = checkresiduals(model)
rest
rest
checkresiduals(model)
saveRDS(model, "model_est.rds")
model = readRDS('model_est.rds')
checkresiduals(model)
plot(checkresiduals(model))
library(forecast)
model = readRDS('model_est.rds')
checkresiduals(model)
library(forecast)
model = readRDS('model_est.rds')
checkresiduals(model)
1-0.388
